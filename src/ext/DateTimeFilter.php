<?php

namespace IP800\ext;


use IntlDateFormatter;
use Twig\Environment;
use Twig\Error\RuntimeError;

class DateTimeFilter extends \Twig\TwigFilter
{
    private static $dateFormatters = [];

    /**
     * @var IntlDateFormatter|null
     */
    private static $dateFormatterPrototype;


    /**
     * @var \NumberFormatter|null
     */
    private static $numberFormatterPrototype;
    /**
     * @param IntlDateFormatter|null $dateFormatterPrototype
     * @param \NumberFormatter|null $numberFormatterPrototype
     */
//    public function __construct(\IntlDateFormatter $dateFormatterPrototype = null, \NumberFormatter $numberFormatterPrototype = null)
//    {
//        $this->dateFormatterPrototype = $dateFormatterPrototype;
//        $this->numberFormatterPrototype = $numberFormatterPrototype;
//    }
    public function __construct()
    {
        parent::__construct("format_datetime", function ($env, $date, $dateFormat = 'medium', $timeFormat = 'medium', $pattern = '', $timezone = null, $calendar = 'gregorian', $locale = null) {
            return self::formatDateTime($env, $date, $dateFormat, $timeFormat, $pattern, $timezone, $calendar, $locale);
        });
    }


    const DATE_FORMATS = [
        'none' => IntlDateFormatter::NONE,
        'short' => IntlDateFormatter::SHORT,
        'medium' => IntlDateFormatter::MEDIUM,
        'long' => IntlDateFormatter::LONG,
        'full' => IntlDateFormatter::FULL,
    ];

    public function needsEnvironment()
    {
        return true; // TODO: Change the autogenerated stub
    }
    /**
     * @param string|null $locale
     * @param string|null $dateFormat
     * @param string|null $timeFormat
     * @param string $pattern
     * @param \DateTimeZone $timezone
     * @param string $calendar
     * @return IntlDateFormatter
     * @throws RuntimeError
     */
    private static function createDateFormatter($locale,$dateFormat,$timeFormat,$pattern, \DateTimeZone $timezone, $calendar)
    {

        $DATE_FORMAT = self::DATE_FORMATS[$dateFormat];
        if (null !== $dateFormat && !isset($DATE_FORMAT)) {
            throw new RuntimeError(sprintf('The date format "%s" does not exist, known formats are: "%s".', $dateFormat, implode('", "', array_keys(self::DATE_FORMATS))));
        }

        $TIME_FORMAT = self::DATE_FORMATS[$timeFormat];
        if (null !== $timeFormat && !isset($TIME_FORMAT)) {
            throw new RuntimeError(sprintf('The time format "%s" does not exist, known formats are: "%s".', $timeFormat, implode('", "', array_keys(self::DATE_FORMATS))));
        }

        if (null === $locale) {
            $locale = \Locale::getDefault();
        }

        $calendar = 'gregorian' === $calendar ? \IntlDateFormatter::GREGORIAN : \IntlDateFormatter::TRADITIONAL;

        $dateFormatValue = isset($dateFormat) ? self::DATE_FORMATS[$dateFormat] : null;
        $timeFormatValue = isset($timeFormat) ? self::DATE_FORMATS[$timeFormat] : null;

        if (self::$dateFormatterPrototype) {
            $dateFormatValue = $dateFormatValue ?: self::$dateFormatterPrototype->getDateType();
            $timeFormatValue = $timeFormatValue ?: self::$dateFormatterPrototype->getTimeType();
            $timezone = $timezone ?: self::$dateFormatterPrototype->getTimeType();
            $calendar = $calendar ?: self::$dateFormatterPrototype->getCalendar();
            $pattern = $pattern ?: self::$dateFormatterPrototype->getPattern();
        }

        $hash = $locale.'|'.$dateFormatValue.'|'.$timeFormatValue.'|'.$timezone->getName().'|'.$calendar.'|'.$pattern;

        $hasFormatter = isset(self::$dateFormatters[$hash]);
        if (!$hasFormatter) {
            self::$dateFormatters[$hash] = new \IntlDateFormatter($locale, $dateFormatValue, $timeFormatValue, $timezone, $calendar, $pattern);
        }

        return self::$dateFormatters[$hash];
    }

    /**
     * @param Environment $env
     * @param $date
     * @param string|null $dateFormat
     * @param string|null $timeFormat
     * @param string $pattern
     * @param $timezone
     * @param string $calendar
     * @param string|null $locale
     * @return string
     */
    public static function formatDateTime(Environment $env, $date, $dateFormat = 'medium', $timeFormat = 'medium', $pattern = '', $timezone = null, $calendar = 'gregorian', $locale = null)
    {
        $date = \twig_date_converter($env, $date, $timezone);
        $formatter = self::createDateFormatter($locale, $dateFormat, $timeFormat, $pattern, $date->getTimezone(), $calendar);

        if (false === $ret = $formatter->format($date)) {
            throw new RuntimeError('Unable to format the given date.');
        }

        return $ret;
    }
}